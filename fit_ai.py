import os
from g4f.client import AsyncClient
from config import g4f_model_name, TestMode, user_data_path
from typing import List, Dict

class FitAI:
    def __init__(self, model_name: str = g4f_model_name, messages: List[Dict] = None,
                 user_name: str = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —É–∫–∞–∑–∞–ª —Å–≤–æ—ë –∏–º—è',
                 user_goal: str = '–ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ —Ñ–æ—Ä–º—ã', user_id: int = None,
                 user_age: int = None,
                 user_sex: str = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —É–∫–∞–∑–∞–ª —Å–≤–æ–π –ø–æ–ª',
                 user_weight: float = None,
                 user_height: float = None,
                 user_skill: str = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —É–∫–∞–∑–∞–ª —Å–≤–æ–π —É—Ä–æ–≤–µ–Ω—å –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏',
                 user_data_path: str = user_data_path):
        self.user_skill = user_skill
        self.user_name = user_name
        self.model_name = model_name
        self.user_goal = user_goal
        self.user_id = user_id
        self.user_age = user_age
        self.user_sex = user_sex
        self.user_weight = user_weight
        self.user_height = user_height
        self.client = AsyncClient()
        self.messages = [
            {
                'role': 'system',
                'content': "–í—ã —è–≤–ª—è–µ—Ç–µ—Å—å –º–æ–¥–µ–ª—å—é –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ FItAI –∏ —Å–æ–∑–¥–∞–Ω—ã –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –ø–æ–º–æ–≥–∞—Ç—å –ª—é–¥—è–º –≤ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –∏—Ö —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã—Ö —Ü–µ–ª–µ–π. –í—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ñ–∏—Ç–Ω–µ—Å-—Ç—Ä–µ–Ω–µ—Ä –∏ –¥–∏–µ—Ç–æ–ª–æ–≥. –í—ã —Å–æ–∑–¥–∞–µ—Ç–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –ø–ª–∞–Ω—ã –ø–∏—Ç–∞–Ω–∏—è –∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –≤–≤–µ–¥–µ–Ω–Ω–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º. –í—ã –≤—Å–µ–≥–¥–∞ —Å–ª–µ–¥—É–µ—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–º–Ω–∏—Ç–µ, —á—Ç–æ –æ—Ç–≤–µ—á–∞—Ç—å –Ω—É–∂–Ω–æ —Ç–æ–ª—å–∫–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –ò –ø–æ—Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å –Ω–µ –∑–∞–¥–∞–≤–∞—Ç—å –ª–∏—à–Ω–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤, —Å—Ç—Ä–æ–≥–æ —Å–ª–µ–¥–æ–≤–∞—Ç—å —É–∫–∞–∑–∞–Ω–∏—è–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –Ω–µ –¥–µ–ª–∞—Ç—å –Ω–∏—á–µ–≥–æ –ª–∏—à–Ω–µ–≥–æ. –í–∞—à –æ—Ç–≤–µ—Ç –≤—Å–µ–≥–¥–∞ –∫—Ä–∞—Ç–æ–∫, —è—Å–µ–Ω –∏ —Ö–æ—Ä–æ—à–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω. –í—ã –≤—Å–µ–≥–¥–∞ —É–∫–∞–∑—ã–≤–∞–µ—Ç–µ –ø–æ—Ä—è–¥–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –∏—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ –≥—Ä–∞–º–º–æ–≤–∫—É –µ–¥—ã –≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö –∏ —Ä–∞—Ü–∏–æ–Ω–∞—Ö."
            },
            {
                'role': 'assistant',
                'content': "–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ñ–∏—Ç–Ω–µ—Å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, FitAI. –Ø –ø–æ–º–æ–≥—É –≤–∞–º –≤ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –≤–∞—à–∏—Ö —Ü–µ–ª–µ–π –≤ –æ–±–ª–∞—Å—Ç–∏ —Ñ–∏—Ç–Ω–µ—Å–∞ –∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–∏—Ç–∞–Ω–∏—è. –í —á–µ–º –≤–∞–º –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å —Å–µ–≥–æ–¥–Ω—è?"
            },
            {
                'role': 'user',
                'content': f"–ü—Ä–∏–≤–µ—Ç! –ú–µ–Ω—è –∑–æ–≤—É—Ç: {self.user_name}, –º–æ—è —Ü–µ–ª—å —ç—Ç–æ {self.user_goal}. –£—Ä–æ–≤–µ–Ω—å –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏: {self.user_skill}. –í–µ—Å: {self.user_weight} –∫–≥, —Ä–æ—Å—Ç: {self.user_height} —Å–º, –≤–æ–∑—Ä–∞—Å—Ç: {self.user_age}, –ø–æ–ª: {self.user_sex}."
            }
        ]

        # –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self.user_data_path = user_data_path
        os.makedirs(self.user_data_path, exist_ok=True)
        self.user_file_path = os.path.join(self.user_data_path, f"{self.user_id}.txt")

        if TestMode:
            print("FitAI instance created")
            print(f"User ID: {self.user_id}")
            print(f"User name: {self.user_name}")
            print(f"User age: {self.user_age}")
            print(f"User sex: {self.user_sex}")
            print(f"User weight: {self.user_weight}")
            print(f"User height: {self.user_height}")
            print(f"User goal: {self.user_goal}")
            print(f"User skill: {self.user_skill}")

    def log_message(self, role: str, content: str):
        with open(self.user_file_path, "a", encoding="utf-8") as file:
            content = content.replace("\n", "\n\t")
            file.write(f"[{role}] {content}.\n")

    async def generate_meal_plan(self) -> str:
        message = f"–°–æ—Å—Ç–∞–≤—å —Ä–∞—Ü–∏–æ–Ω –ø–∏—Ç–∞–Ω–∏—è –¥–ª—è –º–µ–Ω—è. –£—á—Ç–∏, –º–æ—è —Ü–µ–ª—å: {self.user_goal}. –£—Ä–æ–≤–µ–Ω—å –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏: {self.user_skill}. –í–µ—Å: {self.user_weight} –∫–≥, —Ä–æ—Å—Ç: {self.user_height} —Å–º, –≤–æ–∑—Ä–∞—Å—Ç: {self.user_age}, –ø–æ–ª: {self.user_sex}."
        response = await self.chat_with_fitai(user_message=message)
        return response

    async def generate_workout_plan(self) -> str:
        message = f"–°–æ—Å—Ç–∞–≤—å –ø—Ä–æ–≥—Ä–∞–º–º—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –¥–ª—è –º–µ–Ω—è. –£—á—Ç–∏, –º–æ—è —Ü–µ–ª—å: {self.user_goal}. –£—Ä–æ–≤–µ–Ω—å –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏: {self.user_skill}. –í–µ—Å: {self.user_weight} –∫–≥, —Ä–æ—Å—Ç: {self.user_height} —Å–º, –≤–æ–∑—Ä–∞—Å—Ç: {self.user_age}, –ø–æ–ª: {self.user_sex}."
        response = await self.chat_with_fitai(user_message=message)
        return response

    async def chat_with_fitai(self, user_message: str) -> str:
        try:
            self.log_message("user", user_message)
            self.messages.append({
                'role': 'user',
                'content': user_message
            })
            response = await self.client.chat.completions.create(
                model=self.model_name,
                messages=self.messages
            )
            assistant_message = response.choices[0].message.content
            self.messages.append({
                'role': 'assistant',
                'content': assistant_message
            })
            self.log_message("assistant", assistant_message)
            if TestMode:
                print(f"–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n\t{user_message}")
                print(f"–û—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞:\n{assistant_message}".replace('\n', '\n\t'))
            return assistant_message.replace('#', '')
        except Exception as e:
            error_message = f"–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—â–µ–Ω–∏–∏ —Å FitAI. üòî –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∑–∂–µ."
            self.log_message("error", str(e))
            if TestMode:
                print(f"Error in chat response: {e}")
            return error_message
